{"version":3,"sources":["images/user.svg","components/Gif/Gif.js","components/Loading/Loading.js","redux/types.js","components/App/App.js","redux/actions/gifData.action.js","apis/common.api.js","define.js","redux/sagas.js","redux/reducers/gifData.reducer.js","redux/reducers/index.reducer.js","redux/store.js","index.js"],"names":["Gif","data","refData","gifClass","onOpenFullScreen","onCloseFullScreen","onClick","className","ref","e","stopPropagation","alt","user","display_name","src","url","avatar_url","User","defaultProps","undefined","Loading","loading","GET_GIF_SAGA","SET_GIF","App","useState","pageNumber","setPageNumber","selectedIndex","setSelectedIndex","setLoading","gifData","useSelector","state","loadMore","dispatch","useDispatch","observer","useRef","lastGifElement","useCallback","node","current","disconnect","IntersectionObserver","entries","isIntersecting","pre","observe","useEffect","mounted","type","types","payload","setTimeout","JSON","stringify","getClassName","index","closeFullScreen","code","document","addEventListener","removeEventListener","map","item","length","getImageList","a","offset","axios","get","params","api_key","limit","result","getNewGif","rootSaga","action","call","previousGif","store","getState","images","put","takeLatest","initialState","combineReducers","sagaMiddleware","createSagaMiddleware","createStore","reducers","composeWithDevTools","applyMiddleware","run","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.4576e4f1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/user.42a50256.svg\";","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './Gif.scss';\r\nimport User from '../../images/user.svg';\r\n\r\nconst Gif = ({ data, refData, gifClass, onOpenFullScreen, onCloseFullScreen }) => {\r\n    const onCloseImage = (e) => {\r\n        e.stopPropagation();\r\n        onCloseFullScreen();\r\n    }\r\n    return (\r\n        <div data-testid=\"gif\" onClick={onOpenFullScreen} className={`gif ${gifClass}`} ref={refData}>\r\n            <div className=\"gif__img-container\">\r\n                <span data-testid=\"gif-close\" className=\"close-btn\" onClick={onCloseImage}></span>\r\n                <img alt={data.user ? data.user.display_name : 'No data'} src={data.url} alt=\"\" />\r\n            </div>\r\n\r\n            <div className=\"gif__user-info\">\r\n                <img alt={data.user ? data.user.display_name : 'No data'} src={data.user ? data.user.avatar_url : User} alt=\"\" />\r\n                <span className=\"gif__user-name\">\r\n                    {data.user ? data.user.display_name : 'No data'}\r\n                </span>\r\n            </div>\r\n            <span className=\"gif__animation first\"></span>\r\n            <span className=\"gif__animation second\"></span>\r\n            <span className=\"gif__animation third\"></span>\r\n            <span className=\"gif__animation fourth\"></span>\r\n        </div>\r\n    );\r\n};\r\n\r\nGif.propTypes = {\r\n    data: PropTypes.object,\r\n    refData: PropTypes.any,\r\n    gifClass: PropTypes.string,\r\n    onOpenFullScreen: PropTypes.func,\r\n    onCloseFullScreen: PropTypes.func,\r\n}\r\n\r\nGif.defaultProps = {\r\n    data: {},\r\n    refData: undefined,\r\n    gifClass: '',\r\n}\r\n\r\nexport default Gif;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './Loading.scss';\r\n\r\nconst Loading = ({ loading }) => {\r\n    return (\r\n        <>{loading && <ul data-testid=\"loading\" className=\"loading\">\r\n            <li></li>\r\n            <li></li>\r\n            <li></li>\r\n            <li></li>\r\n            <li></li>\r\n            <li></li>\r\n        </ul>}</>\r\n    );\r\n};\r\n\r\nLoading.propTypes = {\r\n    loading: PropTypes.bool.isRequired\r\n}\r\n\r\nLoading.defaultProps = {\r\n    loading: false\r\n}\r\n\r\n\r\nexport default Loading;","export const GET_GIF_SAGA = 'GET_GIF_SAGA';\r\nexport const SET_GIF = 'SET_GIF';","import { useRef, useState, useCallback, useEffect } from 'react';\n\nimport Gif from '../Gif/Gif';\nimport './App.scss';\nimport Loading from '../Loading/Loading';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getGifDataSaga } from '../../redux/actions/gifData.action';\n\nfunction App() {\n  const [pageNumber, setPageNumber] = useState(1);\n  const [selectedIndex, setSelectedIndex] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const gifData = useSelector(state => state.gifData.data ? state.gifData.data : []);\n  const loadMore = useSelector(state => state.gifData.loadMore)\n  const dispatch = useDispatch();\n\n  const observer = useRef();\n\n  // Observe the last element to load more item\n  const lastGifElement = useCallback((node) => {\n    if (loading) return;\n    // Do not observe the changes of the previous IntersectionObserver \n    if (observer.current) observer.current.disconnect();\n    // Set the ref by a new IntersectionObserver\n    observer.current = new IntersectionObserver(entries => {\n      // ensure that can load more\n      if (entries[0].isIntersecting && loadMore) {\n        setPageNumber(pre => pre + 1);\n      }\n    })\n    // Add the element for observing\n    if (node) observer.current.observe(node)\n  }, [loading, loadMore])\n\n  useEffect(() => {\n    let mounted = true;\n    if (mounted) {\n      setLoading(true);\n      dispatch(getGifDataSaga(pageNumber));\n    }\n    return () => mounted = false;\n  }, [pageNumber])\n\n  useEffect(() => {\n    // close loading once received new gifData\n    // the loading will last in 1s\n    setTimeout(() => {\n      setLoading(false);\n    }, 1000)\n  }, [JSON.stringify(gifData)])\n\n  const getClassName = (index) => {\n    if (index === selectedIndex) {\n      return 'selected';\n    }\n    return '';\n  }\n\n  const closeFullScreen = (e) => {\n    if (e.code === 'Escape' && selectedIndex !== false) {\n      setSelectedIndex(false);\n    }\n  }\n\n  useEffect(() => {\n    document.addEventListener('keydown', closeFullScreen);\n    return () => {\n      document.removeEventListener('keydown', closeFullScreen);\n    }\n  }, [selectedIndex])\n\n  return (\n    <div data-testid=\"app\" className=\"app\">\n      {gifData && gifData.map((item, index) => {\n        if (gifData.length === index + 1) {\n          // trigger function infinite scroll, load more data\n          return <Gif\n            onCloseFullScreen={() => setSelectedIndex(false)}\n            onOpenFullScreen={() => { setSelectedIndex(index); }}\n            gifClass={getClassName(index)}\n            key={`gif_${index}`}\n            refData={lastGifElement}\n            data={item} />\n        } else {\n          // without function infinite scroll\n          return <Gif\n            onCloseFullScreen={() => setSelectedIndex(false)}\n            onOpenFullScreen={() => setSelectedIndex(index)}\n            gifClass={getClassName(index)}\n            key={`gif_${index}`}\n            data={item} />\n        }\n      })}\n      <Loading loading={loading} />\n    </div>\n  );\n}\n\nexport default App;\n","import * as types from '../types';\r\nexport const getGifDataSaga = (data) => ({\r\n    type: types.GET_GIF_SAGA,\r\n    payload: data\r\n})","import { API_KEY, LIMIT_QUERY, API_URL } from \"../define\"\r\nimport axios from \"axios\";\r\n\r\nexport const getImageList = async (pageNumber) => {\r\n    try {\r\n        let offset = 0\r\n        if (pageNumber !== 1) {\r\n            offset = (pageNumber - 1) * LIMIT_QUERY + 1;\r\n        }\r\n        let result = await axios.get(API_URL, {\r\n            params: {\r\n                api_key: API_KEY,\r\n                limit: LIMIT_QUERY,\r\n                offset\r\n            }\r\n        });\r\n        return result.data;\r\n    } catch (error) {\r\n        return false;\r\n    }\r\n\r\n}","export const API_KEY = '4Begz52ciLZaqYpR3CM9AvJFDDF3maef';\r\nexport const LIMIT_QUERY = 20;\r\nexport const API_URL = 'https://api.giphy.com/v1/gifs/trending';","import { call, takeLatest, put } from '@redux-saga/core/effects';\r\nimport { getImageList } from '../apis/common.api';\r\nimport * as types from './types';\r\nimport store from './store';\r\nexport function* getNewGif(action) {\r\n    let gifData = yield call(getImageList, action.payload);\r\n    let previousGif = store.getState().gifData.data;\r\n    if (gifData) {\r\n        // filter some fields really need, then concat with the old data, allow infinite scroll\r\n        let data = [...previousGif, ...gifData.data.map(item => ({ url: item.images['480w_still'].url, user: item.user }))]\r\n        yield put({\r\n            type: types.SET_GIF,\r\n            payload: { data, loadMore: data.length > 0 }\r\n        })\r\n    } else {\r\n        // block infinite scroll\r\n        yield put({\r\n            type: types.SET_GIF,\r\n            payload: { data: previousGif, loadMore: false }\r\n        })\r\n    }\r\n}\r\n\r\nexport default function* rootSaga() {\r\n    yield takeLatest(types.GET_GIF_SAGA, getNewGif);\r\n}","import * as types from '../types';\r\nexport const initialState = {\r\n    data: [],\r\n    loadMore: true\r\n};\r\n\r\nexport default function (state = initialState, action = {}) {\r\n    switch (action.type) {\r\n        case types.SET_GIF:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\nimport gifData from \"./gifData.reducer\";\r\nexport default combineReducers({\r\n    gifData\r\n})","import { createStore, applyMiddleware } from 'redux';\r\nimport createSagaMiddleware from '@redux-saga/core';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport rootSaga from './sagas';\r\nimport reducers from './reducers/index.reducer'\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst store = createStore(\r\n    reducers,\r\n    composeWithDevTools(applyMiddleware(sagaMiddleware))\r\n);\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","/** @jsxRuntime classic */\nimport \"react-app-polyfill/ie11\";\nimport 'intersection-observer';\nimport React from 'react'\nimport ReactDOM from 'react-dom';\nimport axios from \"axios\";\n\nimport App from './components/App/App';\nimport './styles/main.scss';\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}